{"version":3,"sources":["views/TextView.js","views/ImageView.js","views/ImageCollection.js","views/MultimediaView.js","views/FileView.js","views/AttachmentsFilesView.js","views/AttachmentsView.js","views/PostContent.js","views/PostView.js","App.js","serviceWorker.js","index.js","logo.svg","views/TextView.module.css","views/ImageCollection.module.css","views/MultimediaView.module.css","views/AttachmentsFilesView.module.css","views/FileView.module.css","views/ImageView.module.css"],"names":["TextView","props","className","style","textView","source","content","escapeHtml","ImageView","imageView","alt","src","tall","wide","desc","ImageCollection","console","log","imageCollection","images","map","image","MultimediaView","multimediaView","file","code","driveFile","pdf","zip","FileView","icon","type","href","download","fileView","AttachmentsFilesView","attachmentsFilesView","files","AttachmentView","PostContent","text","PostView","useState","large","setToggle","morph","useMorph","spring","restDisplacementThreshold","overshootClamping","onClick","id","title","imgFit","name","App","logo","posts","post","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.52285b05.chunk.js","sourcesContent":["import React from 'react'\nimport Markdown from 'react-markdown'\nimport style from './TextView.module.css'\n\n\nfunction TextView(props) {\nreturn (<Markdown className={style.textView} source={props.content} escapeHtml={false}/>)\n}\n\nexport default TextView","import React from 'react'\nimport style from './ImageView.module.css'\n\nfunction ImageView(props) {\n    return (<div className={style.imageView}>\n        <img alt=\"\" src={props.src} className={props.tall===true ? style.tall : style.wide}/>\n        <p>{props.desc}</p>\n    </div>);\n}\n\nexport default ImageView","import React from 'react'\nimport style from './ImageCollection.module.css'\nimport ImageView from './ImageView'\n\nfunction ImageCollection(props) {\n    console.log(props)\n    return (<div className={style.imageCollection}>\n        {\n            props.images.map(image => (\n                <ImageView src={image.src} desc={image.desc} />\n            ))\n        }\n    </div>)\n}\n\nexport default ImageCollection","import './ImageCollection'\nimport React from 'react'\nimport style from './MultimediaView.module.css'\nimport ImageCollection from './ImageCollection'\nimport TextView from './TextView'\n\nfunction MultimediaView(props) {\n    return (\n        <div className={style.multimediaView}>\n            <ImageCollection images={props.images}/>\n            <TextView content={props.content}/>\n        </div>\n    )\n}\n\nexport default MultimediaView","import style from './FileView.module.css'\nimport React from 'react'\n\nconst file = (<img src=\"icons/file.png\" alt=\"File Icon\"/>)\nconst code = (<img src=\"icons/code.png\" alt=\"Code File Icon\"/>)\nconst driveFile = (<img src=\"icons/drive-file.png\" alt=\"Google Drive File Icon\"/>)\nconst pdf = (<img src=\"icons/pdf.png\" alt=\"Pdf file icon\"/>)\nconst zip = (<img src=\"icons/zip.png\" alt=\"Zip file icon\"/>)\nconst image = (<img src=\"icons/image.png\" alt=\"Picture file icon\" />)\n\n\nfunction FileView(props) {\n    let icon = file\n    if (props.type === \"code\") {icon = code;} \n    else if (props.type === \"driveFile\") {icon = driveFile}\n    else if (props.type === \"pdf\") {icon = pdf}\n    else if (props.type === \"zip\") {icon = zip}\n    else if (props.type === \"image\") {icon = image}\n\n    return (<a href={props.file} download>\n        <div className={style.fileView}>\n            <div className=\"center\">\n                {icon}\n            </div>\n            <p>{props.file}</p>\n        </div>\n    </a>)\n}\n\nexport default FileView","import style from './AttachmentsFilesView.module.css'\nimport React from 'react'\nimport FileView from './FileView'\n\nfunction AttachmentsFilesView(props) {\n    return (<div className={style.attachmentsFilesView}>\n        {\n            props.files.map(file => {\n                return (<FileView file={file.file} type={file.type}/>)\n            })\n        }\n    </div>)\n}\n\nexport default AttachmentsFilesView","//import style from './AttachmentsView.module.css'\nimport React from 'react'\nimport TextView from './TextView'\nimport AttachmentsFilesView from './AttachmentsFilesView'\n\nfunction AttachmentView(props) {\n    return (<div>\n        <TextView content={props.content} />\n        <AttachmentsFilesView files={props.files} />\n    </div>);\n}\n\nexport default AttachmentView","import React, { useState } from 'react'\n//import { useMorph } from 'react-morph';\nimport TextView from './TextView';\nimport MultimediaView from './MultimediaView';\nimport ImageCollection from './ImageCollection';\nimport AttachmentView from './AttachmentsView';\n\nfunction PostContent(props) {\n    /*const morph = useMorph({\n        spring: {\n          restDisplacementThreshold: 0.0001,\n          overshootClamping: true,\n        },\n      });*/\n\n    if (props.type === \"text\") {return (<TextView content={props.content}/>)}\n    else if (props.type === \"multimedia\") {return (<MultimediaView images={props.content.images} content={props.content.text}/>)}\n    else if (props.type === \"photos\") {return (<ImageCollection images={props.content}/>)}\n    else if (props.type === \"attachments\") {return <AttachmentView files={props.content.files} content={props.content.text}/>}\n}\nexport default PostContent","import React, { useState } from 'react'\nimport { useMorph } from 'react-morph';\nimport './PostView.css'\nimport PostContent from './PostContent.js'\n\n\n\nfunction PostView(props) {\n    const [large, setToggle] = useState(false);\n    const morph = useMorph({\n        spring: {\n          restDisplacementThreshold: 0.0001,\n          overshootClamping: true,\n        },\n      });\n\n    return large ? (\n        <div {...morph}  className=\"post-large\">\n            <div {...morph} className=\"header\" onClick={() => setToggle(!large)}>\n                <div  className=\"center\" id=\"back\">\n                    <img  src={props.image} alt={props.title} className={props.imgFit} />\n                </div>\n                <div className=\"header-content\">\n                    <h1 >{props.name}</h1>\n                </div>\n            </div>\n            <PostContent {...morph} content={props.content} type={props.type}/>\n        </div>\n    ) : (\n    <div {...morph} className=\"post\" onClick={() => setToggle(!large)}>\n                <div {...morph} className=\"center\" id=\"back\">\n                    <img  src={props.image} alt={props.title} className={props.imgFit}/>\n                </div>\n                <div {...morph} className=\"post-content\">\n                    <h1 {...morph}>{props.name}</h1>\n                    <h3 {...morph}>{props.desc}</h3>\n                </div>\n    </div>\n    );\n}\n\nexport default PostView","import React from 'react';\nimport logo from './logo.svg';\nimport PostView from './views/PostView.js'\nimport posts from './posts.json'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h1>Lukas Werner's Portfolio</h1>\n      </header>\n      <div className=\"posts\">\n        {posts.map(post => (\n          <PostView name={post.name} desc={post.desc} image={post.image} imgFit={post.imgFit} content={post.content} key={post.name} type={post.type}/>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import App from './TestViewer'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.80afbb9a.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textView\":\"TextView_textView__3kOkw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"imageCollection\":\"ImageCollection_imageCollection__6c_-1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"multimediaView\":\"MultimediaView_multimediaView__1d6pp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"attachmentsFilesView\":\"AttachmentsFilesView_attachmentsFilesView__1liA2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fileView\":\"FileView_fileView__33xON\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"imageView\":\"ImageView_imageView__k0Z32\",\"wide\":\"ImageView_wide__WDQt0\",\"tall\":\"ImageView_tall__mhgCZ\"};"],"sourceRoot":""}